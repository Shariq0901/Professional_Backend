name: Node.js CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production_env
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [20.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build code
        run: npm run build --if-present

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and tag Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/nodejs-envanto:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/nodejs-envanto:latest

  deploy:
    needs: build
    runs-on: self-hosted
    environment: production_env
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull the image from Docker Hub
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/nodejs-envanto:latest

      - name: Remove previous container (if exists)
        run: docker rm -f my-server || true

      - name: Run the pulled image
        run: |
          docker run -d \
          --name my-server \
          -p ${{ secrets.PORT }}:8000 \
          -e PORT=${{ secrets.PORT }} \
          -e DB_URL=${{ secrets.DB_URL }} \
          -e CROSS_ORIGIN=${{ secrets.CROSS_ORIGIN }} \
          -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
          ${{ secrets.DOCKER_USERNAME }}/nodejs-envanto:latest
